CREATE DATABASE TranThaiBao
GO
USE TranThaiBao
GO
CREATE TABLE DEPARTMENT
(
	DEPARTMENTID VARCHAR(5) PRIMARY KEY,
	LOCATIONS NVARCHAR(50) NOT NULL,
)
GO
INSERT INTO dbo.DEPARTMENT(DEPARTMENTID,LOCATIONS) VALUES('DPT01',N'Manager');
INSERT INTO dbo.DEPARTMENT(DEPARTMENTID,LOCATIONS) VALUES('DPT02',N'Developer');
INSERT INTO dbo.DEPARTMENT(DEPARTMENTID,LOCATIONS) VALUES('DPT03',N'Technical Staff');
INSERT INTO dbo.DEPARTMENT(DEPARTMENTID,LOCATIONS) VALUES('DPT04',N'Cashier');
INSERT INTO dbo.DEPARTMENT(DEPARTMENTID,LOCATIONS) VALUES('DPT05',N'HRM');
GO
CREATE TABLE STAFF
(
	STAFFID VARCHAR(5) PRIMARY KEY,
	STAFFNAME NVARCHAR(50) NOT NULL,
	BIRTHDATE DATE NOT NULL,
	ADDRESSS NVARCHAR(100) NOT NULL,
	GENDER BIT DEFAULT(0),
	SALARY MONEY DEFAULT(0),
	DEPTID VARCHAR(5),
	FOREIGN KEY(DEPTID) REFERENCES DEPARTMENT(DEPARTMENTID),
)
GO
INSERT INTO dbo.STAFF(STAFFID,STAFFNAME,BIRTHDATE,ADDRESSS,GENDER,SALARY,DEPTID) 
VALUES ('STA01',N'Mr. Tran Thai Bao', '02/02/1990',N'Ho Chi Minh City',DEFAULT, 200000,'DPT02');
INSERT INTO dbo.STAFF(STAFFID,STAFFNAME,BIRTHDATE,ADDRESSS,GENDER,SALARY,DEPTID) 
VALUES ('STA02',N'Mr. Ciro Immobile', '05/09/1987',N'Italia City',DEFAULT, 500000,'DPT02');
INSERT INTO dbo.STAFF(STAFFID,STAFFNAME,BIRTHDATE,ADDRESSS,GENDER,SALARY,DEPTID) 
VALUES ('STA03',N'Mr. Lorenzo Insigne', '12/12/1980',N'Italia City',DEFAULT, 100000,'DPT01');
INSERT INTO dbo.STAFF(STAFFID,STAFFNAME,BIRTHDATE,ADDRESSS,GENDER,SALARY,DEPTID) 
VALUES ('STA04',N'Mr. Giorgio Chiellini', '10/09/2000',N'Italia City',DEFAULT, 350000,'DPT02');
INSERT INTO dbo.STAFF(STAFFID,STAFFNAME,BIRTHDATE,ADDRESSS,GENDER,SALARY,DEPTID) 
VALUES ('STA05',N'Mr. Donnarumma', '07/05/1898',N'Italia City',DEFAULT, 400000,'DPT03');	
GO
CREATE TABLE RELATIVES
(
	STAFFID VARCHAR(5),
	RELATIVENAME NVARCHAR(50),
	PRIMARY KEY(STAFFID, RELATIVENAME),
	GENDER BIT DEFAULT(0),
	BDATE DATE NOT NULL,
	RELATION NVARCHAR(50) NOT NULL,
	FOREIGN KEY(STAFFID) REFERENCES STAFF(STAFFID),
)
GO
INSERT INTO dbo.RELATIVES(STAFFID,RELATIVENAME,GENDER,BDATE,RELATION)
VALUES('STA01', N'Mr. Bao Thai', 1, '02/02/2020', N'Father');
INSERT INTO dbo.RELATIVES(STAFFID,RELATIVENAME,GENDER,BDATE,RELATION)
VALUES('STA01', N'Mr. Trang Quoc Anh', DEFAULT, '12/11/1981', N'Girlfriend');
INSERT INTO dbo.RELATIVES(STAFFID,RELATIVENAME,GENDER,BDATE,RELATION)
VALUES('STA01', N'Mr. Thanh Thuy', DEFAULT, '12/11/1999', N'Girlfriend');
INSERT INTO dbo.RELATIVES(STAFFID,RELATIVENAME,GENDER,BDATE,RELATION)
VALUES('STA02', N'Mr. Federico Chiesa', DEFAULT, '09/03/1992', N'Brother');
INSERT INTO dbo.RELATIVES(STAFFID,RELATIVENAME,GENDER,BDATE,RELATION)
VALUES('STA05', N'Mr. Domenico Berardi', DEFAULT, '03/01/2000', N'Uncle');
INSERT INTO dbo.RELATIVES(STAFFID,RELATIVENAME,GENDER,BDATE,RELATION)
VALUES('STA05', N'Mr. Nicolò Barella', DEFAULT, '11/12/2002', N'Grandfather ');
GO
CREATE TABLE PROJECT 
(
	PRJID VARCHAR(5) PRIMARY KEY,
	PROJECTNAME NVARCHAR(50) NOT NULL,
	LOCATIONS NVARCHAR(50) NOT NULL,
	DEPTID VARCHAR(5),
	FOREIGN KEY(DEPTID) REFERENCES DEPARTMENT(DEPARTMENTID),
)
GO
INSERT INTO dbo.PROJECT(PRJID, PROJECTNAME, LOCATIONS, DEPTID)VALUES('PRO01', N'App Mobile', N'Dev', 'DPT01');
INSERT INTO dbo.PROJECT(PRJID, PROJECTNAME, LOCATIONS, DEPTID)VALUES('PRO02', N'Website manage student', N'Dev', 'DPT02');
INSERT INTO dbo.PROJECT(PRJID, PROJECTNAME, LOCATIONS, DEPTID)VALUES('PRO03', N'Hospital Management', N'Dev', 'DPT03');
INSERT INTO dbo.PROJECT(PRJID, PROJECTNAME, LOCATIONS, DEPTID)VALUES('PRO04', N'Course projects', N'Dev', 'DPT04');
INSERT INTO dbo.PROJECT(PRJID, PROJECTNAME, LOCATIONS, DEPTID)VALUES('PRO05', N'Sql Exercises', N'Dev', 'DPT05');
GO 
CREATE TABLE ASSIGNMENT
(
	STAFFID VARCHAR(5),
	PRJID VARCHAR(5),
	PRIMARY KEY(STAFFID,PRJID),
	DAYSS int DEFAULT(0),
	FOREIGN KEY(STAFFID) REFERENCES STAFF(STAFFID),
	FOREIGN KEY(PRJID) REFERENCES PROJECT(PRJID),
)
GO
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS)VALUES('STA01', 'PRO01', 40);
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS)VALUES('STA02', 'PRO02', 80);
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS)VALUES('STA01', 'PRO03', 90);
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS)VALUES('STA04', 'PRO01', 40);
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS)VALUES('STA01', 'PRO04', 22);

-- 2.
-- a. List of the projects with the most employees 
SELECT TOP 1 PRJID, (COUNT(STAFFID)) AS Amount_Employees
FROM ASSIGNMENT
GROUP BY PRJID
-- b. Lists all employees and project codes that the employee is involved
SELECT S.STAFFID, S.STAFFNAME, A.PRJID AS STAFFID_JOIN
FROM STAFF AS S
LEFT JOIN ASSIGNMENT AS A
ON S.STAFFID = A.STAFFID

-- 3 
--a. Write a function that returns the number of projects an employee has participated in
GO
CREATE FUNCTION Join_The_Project (@MNV VARCHAR(5))
RETURNS INT
BEGIN
	DECLARE @sl INT;
	SELECT @sl = (COUNT(STAFFID)) 
	FROM dbo.ASSIGNMENT
	WHERE STAFFID = @MNV
	RETURN @sl;
END
GO
select dbo.Join_The_Project('STA01') AS 'Total_Project_join'
 
--b.	Write a function that returns a list
GO
CREATE FUNCTION StaffProject()
RETURNS TABLE
AS
RETURN
	SELECT A.STAFFID, S.STAFFNAME, R.RELATIVENAME, COUNT(A.PRJID) AS TotalProject, SUM(A.DAYSS) AS TotalTime
	FROM STAFF AS S
	INNER JOIN ASSIGNMENT AS A ON S.STAFFID = A.STAFFID
	INNER JOIN RELATIVES AS R ON S.STAFFID = R.STAFFID
	GROUP BY A.STAFFID, S.STAFFNAME, R.RELATIVENAME
	--ORDER BY TotalProject DESC, TotalTime ASC
GO
SELECT * FROM StaffProject();

-- 4.
-- a. Add to an employee, have checked primary key, foreign key. 
GO
CREATE PROCEDURE CHECK_KEY (@staffid varchar(5), 
							@staffname nvarchar(50), 
							@birthday date, 
							@addres varchar(100), 
							@gender bit, 
							@salary money, 
							@deptid varchar(5)) 
AS
BEGIN 
	IF NOT EXISTS (SELECT STAFFID FROM STAFF WHERE STAFFID = @staffid)
	BEGIN 
		IF  EXISTS (SELECT DEPARTMENTID FROM DEPARTMENT WHERE DEPARTMENTID = @deptid)
		BEGIN
			INSERT INTO dbo.STAFF(STAFFID,STAFFNAME,BIRTHDATE,ADDRESSS,GENDER,SALARY,DEPTID) 
			VALUES (@staffid,@staffname, @birthday,@addres,@gender, @salary,@deptid);
		END
		ELSE 
		BEGIN
			RAISERROR(N'FOREIGN KEY DOESN"T EXIST',16,1);
			RETURN
		END
	END
	ELSE 
	BEGIN
		RAISERROR(N'PRIMARY KEY EXISTS',16,1);
		RETURN
	END
END
GO
exec CHECK_KEY 'STA06', N'Thái Bảo', '2/2/1988', N'TP. Hồ Chí Minh', 0, 200000, 'DPT02'
GO
exec CHECK_KEY 'STA06', N'Thái Bảo', '2/2/1988', N'TP. Hồ Chí Minh', 0, 200000, 'DPT02' -- error primary key
GO
exec CHECK_KEY 'STA07', N'Thái Bảo', '2/2/1988', N'TP. Hồ Chí Minh', 0, 200000, 'DPT09' -- error foreign key

--b tăng lương
GO
CREATE PROCEDURE Toltal_Relatives
AS
BEGIN
SELECT S.STAFFNAME, S.SALARY, COUNT(R.RELATIVENAME) AS Toltal_Relatives,
	CASE 
	WHEN COUNT(R.RELATIVENAME) <= 2 THEN S.SALARY + 10000
	WHEN COUNT(R.RELATIVENAME) > 2 THEN S.SALARY + 20000
	END AS Salary_Relatives
FROM dbo.STAFF AS S
INNER JOIN dbo.RELATIVES AS R
ON S.STAFFID = R.STAFFID
GROUP BY S.STAFFNAME, S.SALARY
having COUNT(R.RELATIVENAME) >= 1  and COUNT(R.RELATIVENAME) <=2
ORDER BY Toltal_Relatives DESC
END
GO
exec Toltal_Relatives
GO

-- 5: 
-- a: Delete an employee...
GO
ALTER TRIGGER TR_DELETE_STAFF
ON STAFF
AFTER DELETE 
AS 
	IF NOT EXISTS (SELECT STAFFID FROM DELETED WHERE STAFFID = (SELECT R.STAFFID 
																FROM RELATIVES AS R
																INNER JOIN deleted AS D
																ON R.STAFFID = D.STAFFID))
	BEGIN
		--ROLLBACK
		RAISERROR(N'Employees with relatives',16,1);
		RETURN
	END
	ELSE 
	BEGIN 
		RAISERROR(N'Delete successfully',16,1);
		RETURN
	END
GO
SELECT * 
FROM STAFF A
LEFT JOIN RELATIVES S
ON A.STAFFID=S.STAFFID
 
DELETE FROM STAFF WHERE STAFFID = 'STA02' -- ERROR
GO
DELETE FROM STAFF WHERE STAFFID = 'STA04'

-- b Add new Staff...
GO
CREATE  trigger tri_check_Staffid
ON ASSIGNMENT
after insert 
as
		-- LOWNS HƠN 100 DAY + TỒN TẠI STAFFID
		IF NOT EXISTS(SELECT STAFFID FROM inserted WHERE inserted.DAYSS >=100 AND inserted.STAFFID NOT IN (SELECT STAFFID FROM STAFF))
		BEGIN 
			DECLARE @AGE INT;
			SET @AGE =
			(SELECT DATEDIFF(YEAR,S.BIRTHDATE, GETDATE()) AS DAY
			FROM inserted AS I
			INNER JOIN STAFF AS S
			ON I.STAFFID = S.STAFFID
			WHERE I.STAFFID = S.STAFFID)
			IF  (@AGE<30) -- NẾU TUỔI NHỎ HƠN 30 THÌ KHÔNG CHO NHẬP
			BEGIN
				ROLLBACK
				RAISERROR (N'TUOI KHONG HOP LE', 16,2)
				RETURN
			END
		END
GO
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS) 
VALUES ('STA04','PRO05', 150); -- ERROR (< AGE)
GO
INSERT INTO dbo.ASSIGNMENT(STAFFID, PRJID, DAYSS) 
VALUES ('STA01','PRO05', 150);